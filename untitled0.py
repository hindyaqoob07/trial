# -*- coding: utf-8 -*-
"""untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/hindyaqoob07/96417fde94284ab23c6e1b93b0759e4a/untitled0.ipynb
"""

class Chocolate: # This line defines a new class named Chocolate
    def __init__(self, weight, price, type, brand):#This line defines a special method called __init__, which is a constructor method used to initialize objects of the class. It takes four parameters: weight, price, type, and brand.
        self.weight = weight # This line sets the weight attribute of the chocolate object to the value passed as the weight parameter
        self.price = price # This line sets the price attribute of the chocolate object to the value passed as the price parameter.
        self.type = type  # This line sets the type attribute of the chocolate object to the value passed as the type parameter
        self.brand = brand # This line sets the brand attribute of the chocolate object to the value passed as the brand parameter.

def distribute_chocolates_iter(chocolates, students):#This line defines a function for the iterative method
    if len(chocolates) < len(students):# This line presents an if statement that checks if the number of chocolates is less than the number of students.
        return "Not enough chocolates for each student" #If the condition is met the code would return 'Not enough chocolates for each student'

    chocolates.sort(key=lambda x: (x.price, x.weight), reverse=True) # This line sorts chocolates by price and weight in descending order

    result = {} #This is an empty dictionary that will store the results
    for i, student in enumerate(students): #Loop over each student with their index
        result[student] = chocolates[i] #This line assigns each student a chocolate based on the sorted list
    return result #This line returns a dictionary of the results

def distribute_chocolates_rec(chocolates, students, result=None):#This line defines a function for the recursive method
    if len(chocolates) < len(students): #This line presents an if statement that checks if the number of chocolates is less than the number of students.
        return "Not enough chocolates for each student" #If the condition is met the code would return 'Not enough chocolates for each student'

    if result is None:#This line checks if the result dictionary is not provided
        result = {} #This line intilaizes the result dictionary if it's not provided

    if not students: #This line checks if there are no more students left
        return result #This line returns the result dictionary when all students have been assigned chocolates

    result[students[0]] = chocolates.pop(0) #This line assigns chocolate to the first student and remove it from the list
    return distribute_chocolates_rec(chocolates, students[1:], result) #This line is a recursive call to assign chocolates to remaining students

# The Test Cases
chocolates = [
    Chocolate(20, 25.99, "dark", "Cadbury"),
    Chocolate(15, 15.50, "milk", "Hershey's"),
    Chocolate(10, 10.75, "white", "Nestle"),
    Chocolate(25, 30.25, "dark", "Godiva"),
    Chocolate(30, 13.49, "milk", "Lindt"),
] #This line defines a list of Chocolate objects with various attributes

students = ["Hind", "Abdulla", "Rashid", "Noora", "Hissa"] #This line defines a list of students

# Testing the iterative function
print("Iterative Result:") #This line prints a message indicating the start of iterative result printing
iterative_result = distribute_chocolates_iter(chocolates, students) #This line calls the iterative function to distribute chocolates
for student, chocolate in iterative_result.items(): #This line iterates over the result dictionary
    print(f'{student} : The chocolate type is: {chocolate.type} , the brand is: {chocolate.brand}, the weight is:{chocolate.weight}, the price is:{chocolate.price}') #This line will print each students name with the assigned chocolate type, weight , price and brand.

# Testing the recursive function
print("\nRecursive Result:") #This line prints a message indicating the start of recursive result printing
recursive_result = distribute_chocolates_rec(chocolates, students) #This line calls the recusrive function to distribute chocolates
for student, chocolate in recursive_result.items():  #This line iterates over the result dictionary
    print(f'{student} : The chocolate type is: {chocolate.type} , the brand is: {chocolate.brand}, the weight is:{chocolate.weight}, the price is:{chocolate.price}') #This line will print each students name with the assigned chocolate type, weight , price and brand.